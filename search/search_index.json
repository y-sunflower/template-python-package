{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python package template","text":"<p>A python package template that contains everything you need to:</p> <ul> <li>create</li> <li>configure</li> <li><code>test</code></li> <li>document</li> <li>deploy</li> </ul> <p></p> <pre><code>root/\n\u251c\u2500\u2500 package_name/             - Main package directory\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py/\n\u251c\u2500\u2500 tests/                    - Unit tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_main.py\n\u251c\u2500\u2500 docs/                     - Documentation\n\u2502   \u251c\u2500\u2500 README.qmd                - Quarto document that generates README.md\n\u2502   \u251c\u2500\u2500 index.md                  - Main page\n\u2502   \u251c\u2500\u2500 contributing.md           - A contributing guide\n\u2502   \u251c\u2500\u2500 examples.md               - Usage examples\n\u2502   \u251c\u2500\u2500 stylesheets/              - CSS for the documentation\n\u2502   \u2514\u2500\u2500 reference/                - API reference of the package\n\u251c\u2500\u2500 .github/workflows/        - CI/CD\n\u2502   \u251c\u2500\u2500 doc.yaml                  - Deploy website\n\u2502   \u251c\u2500\u2500 lint.yaml                 - Check code with ruff\n\u2502   \u251c\u2500\u2500 tests.yaml                - Run unit tests\n\u2502   \u2514\u2500\u2500 pypi.yaml                 - New PyPI release\n\u251c\u2500\u2500 scripts/                  - Miscellaneous\n\u2502   \u251c\u2500\u2500 release.sh                - Trigger PyPI release\n\u2502   \u2514\u2500\u2500 coverage.sh               - Create/update/display code coverage\n\u251c\u2500\u2500 pyproject.toml            - Configuration, metadata, dependencies\n\u251c\u2500\u2500 README.md                 - Project overview, generated by README.qmd\n\u251c\u2500\u2500 LICENSE                   - License file\n\u251c\u2500\u2500 .gitignore                - Git ignore rules\n\u251c\u2500\u2500 .pre-commit-config.yaml   - Pre commit hooks\n\u2514\u2500\u2500 mkdocs.yaml               - Documentation website configuration\n</code></pre>"},{"location":"#how-to-use-this-template","title":"How to use this template","text":"<p>Go to the Github repo here.</p>"},{"location":"#create-a-new-repo","title":"Create a new repo","text":"<ul> <li>Click on <code>Use this template</code> and <code>Create a new repository</code></li> <li>Clone your repo</li> </ul> <pre><code>git clone https://github.com/your_name/package_name.git\n</code></pre>"},{"location":"#replace-with-your-package-info","title":"Replace with your package info","text":"<ul> <li>Replace all <code>your_name</code> with your GitHub username or organization</li> <li>Replace all <code>package_name</code> with your actual package</li> <li>Replace info in <code>pyproject.toml</code></li> <li>Change the <code>LICENSE</code> file to your actual license (optional)</li> </ul>"},{"location":"#install-dependencies","title":"Install dependencies","text":"<pre><code>uv sync --all-groups\nuv pip install -e .\nuv run pre-commit install\n</code></pre>"},{"location":"#run-tests","title":"Run tests","text":"<pre><code>uv run pytest\n</code></pre> <p>To generate a code coverage badge and see your code coverage, run <code>./scripts/coverage.sh</code></p>"},{"location":"#documentation-website","title":"Documentation website","text":"<p>The documentation is based on mkdocstrings, but feel free to use another framework.</p> <p>You only have to set up GitHub Pages to the <code>gh-pages</code> branch, and <code>.github/workflows/doc.yaml</code> will handle the deployment.</p> <ul> <li>Preview locally:</li> </ul> <pre><code>uv run mkdocs serve\n</code></pre> <ul> <li>Footer of the site:</li> </ul> <p>The footer of the documentation website is defined in <code>overrides/partials/footer.html</code>. If you don\u2019t know HTML/CSS, chatGPT can help you here!</p> <ul> <li>Change main color:</li> </ul> <p>In <code>docs/stylesheets/style.css</code>, change the color value to change the overall style of site:</p> <pre><code>:root {\n  --primary-color: #0096c7;\n}\n</code></pre>"},{"location":"#make-a-new-pypi-release","title":"Make a new PyPI release","text":"<p>New PyPI releases are made via 2 scripts:</p> <ul> <li> <p><code>release.sh</code></p> </li> <li> <p>When you run <code>.scripts/release.sh 1.0.0</code> (to release the 1.0.0     version, for instance), it will commit, tag that commit and push.</p> </li> <li> <p><code>.github/workflows/pypi.yaml</code></p> </li> <li> <p>When a git tag matching <code>v1.2.3</code> format is pushed, it will make a     new PyPI release (in short).</p> </li> </ul> <p>This relies on trusted publishing, which you need to configure. This step is important (on security aspects), so make sure you understand what is happening. Feel free to spend some time reading the scripts and the official documentation.</p> <p>If you don\u2019t plan to make PyPI releases, just delete <code>.scripts/release.sh</code> and <code>.github/workflows/pypi.yaml</code>.</p>"},{"location":"#update-the-readme","title":"Update the README","text":"<p>The <code>README.md</code> file is dynamically generated by <code>docs/README.qmd</code>, a Quarto document.</p> <p>This is optional (you can use a plain <code>README.md</code> and delete <code>docs/README.qmd</code>), but it has many benefits:</p> <ul> <li>it is just markdown too</li> <li>there are lots of customization   options</li> <li>you can include code (for example, dynamic content)</li> </ul> <pre><code>from package_name import add_digit\n\n# The output here is not hardcoded\nprint(add_digit(2, 5))\n</code></pre> <p>7</p> <p>It works perfectly well with most IDEs. You can install Quarto here.</p> <p>To generate <code>README.md</code>, run (make sure your venv is activated):</p> <pre><code>quarto render docs/README.qmd --output-dir ..\n</code></pre> <p> </p> <p>Still have some questions? Open an issue!</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Any kind of contribution is more than welcomed! There are several ways you can contribute:</p> <ul> <li>Opening GitHub issues to list the bugs you've found</li> <li>Implementation of new features or resolution of existing bugs</li> <li>Enhancing the documentation</li> </ul>"},{"location":"contributing/#how-package_name-works","title":"How <code>package_name</code> works","text":"<p>Here's how it works:</p>"},{"location":"contributing/#setting-up-your-environment","title":"Setting up your environment","text":""},{"location":"contributing/#install-for-development","title":"Install for development","text":"<ul> <li> <p>Fork the repository to your own GitHub account.</p> </li> <li> <p>Clone your forked repository to your local machine (ensure you have Git installed):</p> </li> </ul> <pre><code>git clone https://github.com/github_user_name/package_name.git\ncd package_name\ngit remote add upstream https://github.com/your_name/package_name.git\n</code></pre> <ul> <li>Create a new branch:</li> </ul> <pre><code>git checkout -b my-feature\n</code></pre> <ul> <li>Set up your Python environment (ensure you have uv installed):</li> </ul> <pre><code>uv sync --all-extras --dev\nuv pip install -e .\n</code></pre>"},{"location":"contributing/#code","title":"Code","text":"<p>You can now make changes to the package and start coding!</p>"},{"location":"contributing/#run-the-test","title":"Run the test","text":"<ul> <li>Test that everything works correctly by running:</li> </ul> <pre><code>uv run pytest\n</code></pre>"},{"location":"contributing/#preview-documentation-locally","title":"Preview documentation locally","text":"<pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"contributing/#push-changes","title":"Push changes","text":"<ul> <li>Commit and push your changes:</li> </ul> <pre><code>git add -A\ngit commit -m \"description of what you did\"\ngit push\n</code></pre> <ul> <li>Navigate to your fork on GitHub and click the \"Compare &amp; pull request\" button to open a new pull request.</li> </ul> <p>Congrats! Once your PR is merged, it will be part of <code>package_name</code>.</p> <p></p>"},{"location":"examples/","title":"Examples","text":"<p>List of examples</p>"},{"location":"reference/add_digit/","title":"Add digit","text":""},{"location":"reference/add_digit/#package_name.add_digit","title":"<code>package_name.add_digit(a, b)</code>","text":"<p>Add 2 numbers (<code>a</code> and <code>b</code>)</p>"},{"location":"reference/add_digit/#package_name.add_digit--parameters","title":"Parameters","text":"<ul> <li><code>a</code>: a number</li> <li><code>b</code>: a number</li> </ul>"},{"location":"reference/add_digit/#package_name.add_digit--return","title":"Return","text":"<p>The sum between <code>a</code> and <code>b</code></p>"},{"location":"reference/add_digit/#package_name.add_digit--example","title":"Example","text":"<pre><code>from package_name import add_digit\n\nadd_digit(5, 8)\n</code></pre>"}]}